# Generated by Django 2.1.7 on 2019-05-04 01:58

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import fpapi.managers.user_manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('login', models.CharField(max_length=63, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('passhash', models.CharField(blank=True, max_length=255, null=True)),
                ('login_type', models.IntegerField(blank=True, null=True)),
                ('permissions', models.IntegerField(blank=True, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'user',
            },
            managers=[
                ('objects', fpapi.managers.user_manager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AttributeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
            ],
            options={
                'db_table': 'attributeValue',
            },
        ),
        migrations.CreateModel(
            name='Datum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.TextField(blank=True, db_column='userid', null=True)),
                ('timestamp', models.BigIntegerField()),
                ('gps_long', models.FloatField(blank=True, null=True)),
                ('gps_lat', models.FloatField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('num_value', models.DecimalField(blank=True, db_column='numValue', decimal_places=3, max_digits=11, null=True)),
                ('txt_value', models.TextField(blank=True, db_column='txtValue', null=True)),
            ],
            options={
                'db_table': 'datum',
            },
        ),
        migrations.CreateModel(
            name='DeviceName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('android_id', models.CharField(db_column='androidId', max_length=16)),
                ('nickname', models.CharField(blank=True, db_column='nickName', max_length=63, null=True)),
            ],
            options={
                'db_table': 'deviceName',
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row', models.IntegerField()),
                ('col', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('barcode', models.TextField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('migrated_id', models.IntegerField(blank=True, db_column='old_node_id', null=True)),
            ],
            options={
                'db_table': 'node',
            },
        ),
        migrations.CreateModel(
            name='NodeAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127)),
                ('data_type', models.IntegerField(db_column='datatype', default=2)),
                ('func', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'nodeAttribute',
            },
        ),
        migrations.CreateModel(
            name='NodeNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, null=True)),
                ('timestamp', models.BigIntegerField()),
                ('user_id', models.TextField(blank=True, db_column='userid', null=True)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Node')),
            ],
            options={
                'db_table': 'nodeNote',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, unique=True)),
                ('contact_name', models.TextField(db_column='contactName')),
                ('contact_email', models.TextField(db_column='contactEmail')),
                ('migrated_project', models.CharField(blank=True, db_column='old_project_db', max_length=63, null=True)),
                ('parent_project', models.ForeignKey(blank=True, db_column='up_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='fpapi.Project')),
            ],
            options={
                'db_table': 'project',
            },
        ),
        migrations.CreateModel(
            name='ProjectPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('dbname', models.CharField(blank=True, max_length=255, null=True)),
                ('migrated_dbname', models.CharField(blank=True, db_column='old_dbname', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63, unique=True)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'system',
            },
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=31)),
            ],
            options={
                'db_table': 'token',
            },
        ),
        migrations.CreateModel(
            name='TokenNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_id', models.IntegerField(db_column='localId')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Node')),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Token')),
            ],
            options={
                'db_table': 'tokenNode',
            },
        ),
        migrations.CreateModel(
            name='Trait',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_trial_id', models.IntegerField(blank=True, db_column='trial_id', null=True)),
                ('caption', models.CharField(max_length=63)),
                ('description', models.TextField()),
                ('_data_type', models.IntegerField(choices=[(0, 'INTEGER'), (1, 'DECIMAL'), (2, 'STRING'), (3, 'CATEGORICAL'), (4, 'DATE'), (5, 'PHOTO'), (6, 'LOCATION')], db_column='datatype')),
                ('t_id', models.TextField(blank=True, db_column='tid', null=True)),
                ('unit', models.TextField(blank=True, null=True)),
                ('min_val', models.DecimalField(blank=True, db_column='min', decimal_places=0, max_digits=10, null=True)),
                ('max_val', models.DecimalField(blank=True, db_column='max', decimal_places=0, max_digits=10, null=True)),
                ('migrated_id', models.IntegerField(blank=True, db_column='old_trait_id', null=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fpapi.Project')),
            ],
            options={
                'db_table': 'trait',
            },
        ),
        migrations.CreateModel(
            name='TraitCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('caption', models.TextField()),
                ('image_url', models.TextField(blank=True, db_column='imageURL', null=True)),
                ('trait', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trait')),
            ],
            options={
                'db_table': 'traitCategory',
            },
        ),
        migrations.CreateModel(
            name='TraitInstance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_created', models.IntegerField(db_column='dayCreated')),
                ('sequence_number', models.IntegerField(db_column='seqNum')),
                ('sample_number', models.IntegerField(db_column='sampleNum')),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Token')),
                ('trait', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trait')),
            ],
            options={
                'db_table': 'traitInstance',
            },
        ),
        migrations.CreateModel(
            name='TraitString',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern', models.TextField(blank=True, null=True)),
                ('trait', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trait')),
            ],
            options={
                'db_table': 'traitString',
            },
        ),
        migrations.CreateModel(
            name='Trial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63)),
                ('site', models.TextField(blank=True, null=True)),
                ('year', models.TextField(blank=True, null=True)),
                ('acronym', models.TextField(blank=True, null=True)),
                ('migrated_id', models.IntegerField(blank=True, db_column='old_trial_id', null=True)),
            ],
            options={
                'db_table': 'trial',
            },
        ),
        migrations.CreateModel(
            name='TrialProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63)),
                ('value', models.TextField(blank=True, null=True)),
                ('trial', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trial')),
            ],
            options={
                'db_table': 'trialProperty',
            },
        ),
        migrations.CreateModel(
            name='TrialTrait',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_attribute', models.ForeignKey(blank=True, db_column='barcodeAtt_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='fpapi.NodeAttribute')),
                ('trait', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trait')),
                ('trial', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trial')),
            ],
            options={
                'db_table': 'trialTrait',
            },
        ),
        migrations.CreateModel(
            name='TrialTraitNumeric',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.DecimalField(blank=True, db_column='min', decimal_places=9, max_digits=18, null=True)),
                ('max_value', models.DecimalField(blank=True, db_column='max', decimal_places=9, max_digits=18, null=True)),
                ('validation', models.TextField(blank=True, null=True)),
                ('trait', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trait')),
                ('trial', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trial')),
            ],
            options={
                'db_table': 'trialTraitNumeric',
            },
        ),
        migrations.CreateModel(
            name='UserProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permissions', models.IntegerField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.ProjectPermissions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'userProject',
            },
        ),
        migrations.AddField(
            model_name='trial',
            name='_traits',
            field=models.ManyToManyField(through='fpapi.TrialTrait', to='fpapi.Trait'),
        ),
        migrations.AddField(
            model_name='trial',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trials', to='fpapi.Project'),
        ),
        migrations.AddField(
            model_name='traitstring',
            name='trial',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trial'),
        ),
        migrations.AddField(
            model_name='traitinstance',
            name='trial',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trial'),
        ),
        migrations.AddField(
            model_name='token',
            name='trial',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trial'),
        ),
        migrations.AddField(
            model_name='projectpermissions',
            name='members',
            field=models.ManyToManyField(through='fpapi.UserProject', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nodenote',
            name='token',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Token'),
        ),
        migrations.AddField(
            model_name='nodeattribute',
            name='trial',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Trial'),
        ),
        migrations.AddField(
            model_name='node',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='fpapi.Project'),
        ),
        migrations.AddField(
            model_name='node',
            name='trial',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes', to='fpapi.Trial'),
        ),
        migrations.AddField(
            model_name='datum',
            name='node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Node'),
        ),
        migrations.AddField(
            model_name='datum',
            name='trait_instance',
            field=models.ForeignKey(db_column='traitInstance_id', on_delete=django.db.models.deletion.CASCADE, to='fpapi.TraitInstance'),
        ),
        migrations.AddField(
            model_name='attributevalue',
            name='node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpapi.Node'),
        ),
        migrations.AddField(
            model_name='attributevalue',
            name='node_attribute',
            field=models.ForeignKey(db_column='nodeAttribute_id', on_delete=django.db.models.deletion.CASCADE, to='fpapi.NodeAttribute'),
        ),
        migrations.AlterUniqueTogether(
            name='userproject',
            unique_together={('user', 'project')},
        ),
        migrations.AlterUniqueTogether(
            name='trialtraitnumeric',
            unique_together={('trial', 'trait')},
        ),
        migrations.AlterUniqueTogether(
            name='trialtrait',
            unique_together={('trait', 'trial')},
        ),
        migrations.AlterUniqueTogether(
            name='trialproperty',
            unique_together={('trial', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='traitstring',
            unique_together={('trial', 'trait')},
        ),
        migrations.AlterUniqueTogether(
            name='traitinstance',
            unique_together={('trial', 'trait', 'token', 'sequence_number', 'sample_number')},
        ),
        migrations.AlterUniqueTogether(
            name='traitcategory',
            unique_together={('trait', 'value')},
        ),
        migrations.AlterUniqueTogether(
            name='tokennode',
            unique_together={('token', 'local_id')},
        ),
        migrations.AlterUniqueTogether(
            name='nodeattribute',
            unique_together={('trial', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='datum',
            unique_together={('node', 'trait_instance', 'timestamp')},
        ),
        migrations.AlterUniqueTogether(
            name='attributevalue',
            unique_together={('node_attribute', 'node')},
        ),
    ]
